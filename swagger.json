{
  "swagger": "2.0",
  "info": {
    "version": "0.1.0",
    "title": "Process Engine HTTP REST API",
    "description": "",
    "termsOfService": "terms"
  },
  "consumes": ["application/json"],
  "produces": ["application/json"],
  "tags": [
    {
      "name": "iam",
      "description": "Endpoints to authenticate and manage rights"
    },
    {
      "name": "process engine",
      "description": "Endpoints to execute and manage of processes"
    },
    {
      "name": "messagebus",
      "description": "Endpoints to put messages on the messagebus"
    },
    {
      "name": "datastore",
      "description": "Endpoints to interact with the datastore"
    }
  ],
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "after logging in via `/iam/login` provide the resulting bearer-token as Authorization-header in the form of `'Bearer ' + bearer_token`"
    }
  },
  "definitions": {
    "IIdentity": {
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EntityMetadata": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "isRef": {
          "type": "boolean"
        },
        "isNew": {
          "type": "boolean"
        }
      }
    },
    "IUserEntity": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "_meta": {
          "$ref": "#/definitions/EntityMetadata"
        }
      }
    },
    "IUserTaskMessageData": {
      "type": "object",
      "properties": {
        "userTaskEntity": {
          "$ref": "#/definitions/IUserTaskEntity"
        },
        "uiName": {
          "type": "string"
        },
        "uiData": {},
        "uiConfig": {}
      }
    },
    "IProcessEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "_meta": {
          "$ref": "#/definitions/EntityMetadata"
        }
      }
    },
    "IProcessTokenEntity": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "data": {},
        "process": {
          "$ref": "#/definitions/IProcessEntity"
        },
        "_meta": {
          "$ref": "#/definitions/EntityMetadata"
        }
      }
    },
    "INodeDefEntity": {
      "type": "object",
      "properties": {
        "lane": {
          "$ref": "#/definitions/ILaneEntity"
        },
        "extensions": {},
        "id": {
          "type": "string"
        },
        "_meta": {
          "$ref": "#/definitions/EntityMetadata"
        }
      }
    },
    "BpmnType": {
      "enum": [
        "bpmn:BoundaryEvent",
        "bpmn:CallActivity",
        "bpmn:EndEvent",
        "bpmn:ExclusiveGateway",
        "bpmn:IntermediateCatchEvent",
        "bpmn:IntermediateThrowEvent",
        "bpmn:ParallelGateway",
        "bpmn:ScriptTask",
        "bpmn:ServiceTask",
        "bpmn:StartEvent",
        "bpmn:SubProcess",
        "bpmn:UserTask"
      ],
      "type": "string"
    },
    "IUserTaskEntity": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "process": {
          "$ref": "#/definitions/IProcessEntity"
        },
        "nodeDef": {
          "$ref": "#/definitions/INodeDefEntity"
        },
        "type": {
          "$ref": "#/definitions/BpmnType"
        },
        "state": {
          "type": "string"
        },
        "participant": {
          "type": "string"
        },
        "application": {
          "type": "string"
        },
        "processToken": {
          "$ref": "#/definitions/IProcessTokenEntity"
        },
        "instanceCounter": {
          "type": "number"
        },
        "id": {
          "type": "string"
        },
        "_meta": {
          "$ref": "#/definitions/EntityMetadata"
        }
      }
    },
    "ClaimActionType": {
      "enum": [
        0,
        1,
        2,
        3,
        4,
        5
      ],
      "type": "number"
    },
    "IAuthObject": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        },
        "identity": {
          "$ref": "#/definitions/IIdentity"
        }
      }
    },
    "IExpand": {
      "properties": {
        "attribute": {
          "type": "string"
        },
        "childAttributes": {
          "type": "array",
          "items": {
            "type": "IExpand",
            "description": "not linked to prevent infinite loop"
          }
        }
      }
    },
    "IPublicGetOptions": {
      "description": "options to query data from the datastore",
      "properties": {
        "select": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "expandEntity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IExpand"
          }
        },
        "query": {
          "type": "IQueryObject | Array<IQueryObject> | string",
          "description": "not linked because OpenAPI doesn't allow mutli-types, see [swagger-api-issue #236](https://github.com/swagger-api/swagger-parser/issues/236)"
        }
      }
    },
    "MessagebusPublication": {
      "properties": {
        "channel": {
          "type": "string",
          "description": "the channel the message will be published on"
        },
        "msg": {
          "description": "the content of your message. This in an arbitrary object",
          "properties": {}
        },
        "options": {
          "required": false,
          "description": "Arbitrary object with additional metadata-options that will be attached to the message",
          "properties": {}
        }
      }
    },
    "StartProcessMessage": {
      "description": "An object describing the process to start and its initial state",
      "properties": {
        "msg": {
          "description": "An object with the necessary information to identify the process that should be started",
          "properties": {
            "key": {
              "type": "string"
            }
          }
        },
        "options": {
          "description": "Additional query options for the process you want to start. These options are passed through to the start-method of the processEntity, but aren't used there.",
          "$ref": "#/definitions/IPublicGetOptions"
        }
      }
    },
    "ResultObject": {
      "description": "An object indicating the success or failure of an action.",
      "properties": {
        "result": {
          "type": "boolean"
        }
      }
    },
    "SuccessObject": {
      "description": "An object indicating the success of an action.",
      "properties": {
        "result": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "UserCredentials": {
      "description": "User credentials",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "EntityTypeServiceData": {
    }
  },
  "paths": {
    "/processengine/start": {
      "post": {
        "tags": ["process engine"],
        "summary": "Start the execution of a process",
        "description": "This orders the process engine to start executing a process",
        "parameters": [
          {
            "name": "start message",
            "description": "The message describing the process to start and its initial state",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StartProcessMessage"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ID of the newly started process instance",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/processengine/user_task_data/{user_task_id}": {
      "parameters": [
        {
          "name": "user_task_id",
          "in": "path",
          "type": "string",
          "required": true,
          "description": "The ID of the userTask."
        }
      ],
      "get": {
        "tags": ["process engine"],
        "summary": "Get Information about a userTask",
        "description": "UserTasks can have dynamic parts that depend on the current process. Because of this, they need to be interpreted before they can be displayed, and you can't just get them from the datastore. This route gives you the fully interpreted and processed information you need to display a userTask.",
        "responses": {
          "200": {
            "description": "Fetching the userTask information was successful",
            "schema": {
              "$ref": "#/definitions/IUserTaskMessageData"
            }
          }
        }
      }
    },
    "/processengine/execute": {
      "post": {
        "tags": ["process engine"],
        "summary": "Execute a process",
        "description": "This orders the process engine to execute a process. The difference to `/processengine/start` is, that the process engine will only respond once the porcess has finished executing. The Response will contain the last state of the processToken, or in other words: The result of the proccess.",
        "parameters": [
          {
            "name": "key",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The key of the process that should be executed. Either this or the id has to be set."
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The id of the process that should be executed. Either this or the key has to be set."
          },
          {
            "name": "version",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The version of the process taht should be executed. If not set, the latest version will be run"
          }
        ],
        "responses": {
          "200": {
            "description": "Executing the process was successful. This does not mean, that the process didn't fail. It only means, that ordering the process to start, and waiting for it to end was successful. This does not indicate why the process ended.",
            "schema": {
              "description": "The last state of the process token when the process ended. This in an arbitrary object, that represents the result of the process.",
              "properties": {}
            }
          }
        }
      }
    },
    "/messagebus/publish": {
      "post": {
        "tags": ["messagebus"],
        "summary": "Publish a message on the messagebus",
        "description": "This makes the process engine send the given message to the given channel on its messagebus.",
        "parameters": [
          {
            "name": "message",
            "description": "a message that can be published on the messagebus",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/MessagebusPublication"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SuccessObject"
            }
          }
        }
      }
    },
    "/iam/login": {
      "post": {
        "tags": ["iam"],
        "summary": "Authenticate a user",
        "description": "Given some correct credentials, this will get you a token you can use to authenticate yourself to the process engine.",
        "parameters": [
          {
            "name": "user credentials",
            "description": "The credentials of the user you want to login as.",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserCredentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The Login was successful",
            "schema": {
              "$ref": "#/definitions/IAuthObject"
            }
          }
        }
      }
    },
    "/iam/logout": {
      "get": {
        "tags": ["iam"],
        "summary": "Log the user out",
        "description": "This invalidates your token which effectively logs you out",
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SuccessObject"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/iam/getidentity": {
      "get": {
        "tags": ["iam"],
        "summary": "Get the users identity",
        "description": "This will give you the Identity of the user that is authenticated with your Token",
        "responses": {
          "200": {
            "description": "Fetching the users identity was successful.",
            "schema": {
              "$ref": "#/definitions/IIdentity"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/iam/getidentityentity": {
      "get": {
        "tags": ["iam"],
        "summary": "Get the entity to the users identity",
        "description": "This will give you the entity to the identity of the user that is authenticated with your token. This is like `/iam/getidentity`, but with a little more information.",
        "responses": {
          "200": {
            "description": "Fetching the Entity to the users Identity was successful.",
            "schema": {
              "$ref": "#/definitions/IUserEntity"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ]
      }
    },
    "/iam/validatecredentials": {
      "post": {
        "tags": ["iam"],
        "summary": "Validate user credentials",
        "description": "This Checks if the given user credentials are valid.",
        "parameters": [
          {
            "name": "user credentials",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserCredentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`true`: The given credentials are valid. `false`: The given credentials are not valid.",
            "schema": {
              "$ref": "#/definitions/ResultObject"
            }
          }
        }
      }
    },
    "/datastore": {
      "get": {
        "tags": ["datastore"],
        "summary": "Get the datastore catalog"
      }
    },
    "/datastore/{className}": {
      "get": {
        "tags": ["datastore"],
        "summary": "Get a collenction of entities"
      },
      "post": {
        "tags": ["datastore"],
        "summary": "Create a new entity"
      }
    },
    "/datastore/{className}/{id}": {
      "get": {
        "tags": ["datastore"],
        "summary": "Create an entity by id"
      },
      "put": {
        "tags": ["datastore"],
        "summary": "Update an entity"
      },
      "delete": {
        "tags": ["datastore"],
        "summary": "Delete an entity"
      }
    },
    "/datastore/{className}/service/{method}": {
      "post": {
        "tags": ["datastore"],
        "summary": "Execute a method on an entity-type-service",
        "description": "Execute an arbitrary method on an entity-type-service. Entity-type-services are support-classes to manage entities of a certain type. Currently there are only the `NodeInstanceEntityTypeService` and the `ProcessDefEntityTypeService`",
        "parameters": [
          {
            "name": "className",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The name of the EntityTypeService that has the method that should be executed. The currently valid values are `NodeInstance` and `ProcessDef`"
          },
          {
            "name": "method",
            "in": "path",
            "type": "string",
            "required": true,
            "description": "The name of the method that should be executed"
          },
          {
            "name": "data",
            "in": "body",
            "type": "object",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {}
            },
            "description": "An arbitrary object that contains the parameters that should be passed to the method. IF a schema for the method is found, whatever value has the name of the parameter as key will be passed as that parameter.\nFor example when the request-body looks like `{hello: 'world', test: 123}`, and the method-definition like `myMethod(hello, test, options){ }`, then `hello` will be `'world'` and `test` will be `123` in that method. If no schema is found, the the body will just be passed as the first paramter. In that case `hello` would be `{hello: 'world', test: 123}` and `test` would be `undefined`. The Only parameter you can not define this way is `options`. It will always be parsed from the query-parameter called `query`"
          },
          {
            "name": "query",
            "in": "query",
            "type": "IPublicGetOptions",
            "required": false,
            "description": "Whatever is defined here will be passed to the called function as the parameter with the name `options`. This is "
          }
        ]
      }
    },
    "/datastore/{className}/{id}/{method}": {
      "post": {
        "tags": ["datastore"],
        "summary": "Execute a method on an entity-instance",
        "description": "Execute an arbitrary method on a specific instance of an entity"
      }
    }
  }
}
